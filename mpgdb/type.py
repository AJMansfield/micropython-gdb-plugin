import warnings
import gdb
from . import file

NAMES = dict.fromkeys([ # mp_type_{}
    # From obj.h
    "type",
    "object",
    "NoneType",
    "bool",
    "int",
    "str",
    "bytes",
    "bytearray",
    "memoryview",
    "float",
    "complex",
    "tuple",
    "list",
    "map",
    "enumerate",
    "filter",
    "deque",
    "dict",
    "ordereddict",
    "range",
    "set",
    "frozenset",
    "slice",
    "zip",
    "array",
    "super",
    "gen_wrap",
    "native_gen_wrap",
    "gen_instance",
    "fun_builtin_0",
    "fun_builtin_1",
    "fun_builtin_2",
    "fun_builtin_3",
    "fun_builtin_var",
    "fun_bc",
    "fun_native",
    "fun_viper",
    "fun_asm",
    "code",
    "module",
    "staticmethod",
    "classmethod",
    "bound_meth",
    "property",
    "stringio",
    "bytesio",
    "ringio",
    "reversed",
    "polymorph_iter",
    "polymorph_iter_with_finaliser",
    "BaseException",
    "ArithmeticError",
    "AssertionError",
    "AttributeError",
    "EOFError",
    "Exception",
    "GeneratorExit",
    "ImportError",
    "IndentationError",
    "IndexError",
    "KeyboardInterrupt",
    "KeyError",
    "LookupError",
    "MemoryError",
    "NameError",
    "NotImplementedError",
    "OSError",
    "OverflowError",
    "RuntimeError",
    "StopAsyncIteration",
    "StopIteration",
    "SyntaxError",
    "SystemExit",
    "TypeError",
    "UnicodeError",
    "ValueError",
    "ViperTypeError",
    "ZeroDivisionError",

    # from whole-codebase search for MP_DEFINE_CONST_OBJ_TYPE
    "usb_device_builtin_default",
    "usb_device_builtin_none",
    "bluetooth_uuid",
    "bluetooth_ble",
    "framebuf",
    "poll",
    "vfs_fat_fileio",
    "vfs_fat_textio",
    "vfs_posix_fileio",
    "vfs_posix_textio",
    "vfs_posix",
    "vfs_rom_fileio",
    "vfs_rom_textio",
    "vfs_rom",
    "stest_fileio",
    "stest_textio2",
    "socket",
    "jsproxy_gen",
    "jsproxy",
    "undefined",
    "iobase",
    "bufwriter",
    "thread_lock",
    "array",
    "bytearray",
    "memoryview",
    "array_it",
    "attrtuple",
    "bound_meth",
    "closure",
    "code",
    "code",
    "complex",
    "deque",
    "dict_view_it",
    "dict_view",
    "dict",
    "ordereddict",
    "enumerate",
    "BaseException",
    "filter",
    "float",
    "fun_builtin_0",
    "fun_builtin_1",
    "fun_builtin_2",
    "fun_builtin_3",
    "fun_builtin_var",
    "fun_bc",
    "fun_native",
    "fun_viper",
    "fun_asm",
    "gen_wrap",
    "native_gen_wrap",
    "gen_instance",
    "it",
    "int",
    "list",
    "map",
    "module",
    "NoneType",
    "object",
    "polymorph_iter",
    "polymorph_iter_with_finaliser",
    "property",
    "range_it",
    "range",
    "reversed",
    "ringio",
    "set",
    "frozenset",
    "singleton",
    "slice",
    "str",
    "bytes",
    "stringio",
    "bytesio",
    "str",
    "tuple",
    "type",
    "super",
    "staticmethod",
    "classmethod",
    "zip",
    "frame",
    "checked_fun",
])

def _lookup(name: str) -> gdb.Value:
    fullname = "mp_type_{}".format(name)
    symbol = file.micropython.lookup_global_symbol(fullname, gdb.SYMBOL_VAR_DOMAIN)
    return symbol.value().address

def __getattr__(name: str) -> gdb.Value:
    symbol = NAMES.get(name, None)
    if symbol is not None:
        return symbol
    
    symbol = _lookup(name)
    if symbol is not None:
        NAMES[name] = symbol
        return symbol
    
    if name in NAMES:
        del NAMES[name]

    raise AttributeError(f"Cant find mp_type_{name}.", name=name)
    
def __dir__() -> list[str]:
    return list(NAMES)
